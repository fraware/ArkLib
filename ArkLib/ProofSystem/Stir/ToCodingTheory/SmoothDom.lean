/-
Copyright (c) 2025 ArkLib Contributors. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Least Authority
-/

import Mathlib.FieldTheory.Finite.Basic
import Mathlib.FieldTheory.Finite.GaloisField
import Mathlib.Algebra.Group.Subgroup.Basic
import Mathlib.Data.Fintype.Units
import Mathlib.Data.Fintype.Card

/-- A set L ‚äÜ ùîΩ is `smooth` if `|L| = 2^k` for some `k` and there exists a subgroup `H` in `ùîΩ^‚ãÜ` and an invertible field element `a` such that `L = a ‚Ä¢ H` -/
def smoothDom {F : Type*} [Field F] [DecidableEq F] (L : Finset F) : Prop :=
  ‚àÉ H : Subgroup (Units F), ‚àÉ a : Units F, ‚àÉ k : ‚Ñï,
    -- f : Œ± ‚Üí Œ≤, S : Set Œ±  then  f '' S means {y : Œ≤ ‚à£ ‚àÉx‚ààS,y=f(x) }
    (L : Set F) = (fun h : Units F ‚Ü¶ (a : F) * h) '' (H : Set (Units F))  ‚àß -- L = a ‚Ä¢ H
    L.card = 2 ^ k

/-- The `k`-th power of `L`,  `L^k := { x^k | x ‚àà L }` -/
def powDom {F : Type*} [Field F] [DecidableEq F] (L : Finset F) (k : ‚Ñï) : Finset F :=
  L.image fun x : F => x ^ k

/-- The fiber `f‚Åª¬π(y)` for the surjection `f : L ‚Üí L^k, x ‚Üí x^k` and `y ‚àà L^k` -/
def powFiber {F : Type*} [Field F] [DecidableEq F] (L : Finset F) (k : ‚Ñï) (x : powDom L k) : Finset F :=
  L.filter (fun y => y ^ k = x)

/-- Restrict `f : L ‚Üí F` to a subset `S ‚äÜ L`. -/
def restrictTo {F : Type*} [Field F] [DecidableEq F] (L : Finset F) (f : L ‚Üí F) (S : Finset F) (hS : S ‚äÜ L) : (‚ÜëS ‚Üí F) :=
  fun x => f ‚ü®x, hS x.2‚ü©
