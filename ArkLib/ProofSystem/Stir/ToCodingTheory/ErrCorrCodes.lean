/-
Copyright (c) 2025 ArkLib Contributors. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Least Authority
-/

import ArkLib.ProofSystem.Stir.ToCodingTheory.FracHammingDist

import Mathlib.Data.Finset.Basic
import Mathlib.Data.Fintype.Basic


/-!  ###  Error‚Äìcorrecting codes over an alphabet  -/


/-- An error correcting code of finite length `|Œπ|` over some finite alphabet `A`. -/
structure ErrCorrCode
  (A : Type*) [Fintype A] [DecidableEq A]
  (Œπ : Type*) [Fintype Œπ] where
    words : Finset (Œπ ‚Üí A)


namespace ErrCorrCode

variable {A : Type*} [Fintype A] [DecidableEq A] {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]


/-- The set `Œõ(C, f, Œ¥)` of codewords within fractional Hamming distance `Œ¥`
of function `f: Œπ ‚Üí A`. -/
noncomputable def list (C : ErrCorrCode A Œπ) (f : Œπ ‚Üí A) (Œ¥ : ‚Ñù) : Finset (Œπ ‚Üí A) :=
  C.words.filter (fun c ‚Ü¶ fractionalHammingDist f c ‚â§ Œ¥)

/-- A code is `(Œ¥, ‚Ñì)`‚Äìlist decodable if every function `f : Œπ ‚Üí Œ£` has at most `‚Ñì` codewords
within fractional Hamming distance `Œ¥` -/
def listDecodable (C : ErrCorrCode A Œπ) (Œ¥ : ‚Ñù ) (‚Ñì : ‚Ñù) : Prop :=
  ‚àÄ f : Œπ ‚Üí A, (C.list f Œ¥).card ‚â§ ‚Ñì

/-- A radius `Œ¥` is `within unique decoding` when the code is `(Œ¥, 1)`‚Äìlist decodable. -/
def withinUniqueDecoding (C : ErrCorrCode A Œπ) (Œ¥ : ‚Ñù) : Prop :=
  C.listDecodable Œ¥ 1

/-- L‚â†‚àÖ ‚Üí |C.code| ‚â• 2 since |ùîΩ| ‚â• 2 -/
lemma nonempty (C : ErrCorrCode A Œπ) : C.words.Nonempty := sorry

end ErrCorrCode

structure LinearCode
  (F : Type*) [Field F]  [Fintype F]
  (Œπ : Type*) [Fintype Œπ] where
  words : Finset (Œπ ‚Üí F)

namespace LinearCode

/-- Forget the linear-structure and view a `LinearCode` as `ErrorCorrectingCode`-/
def toErrCorrCode
  {F : Type*} [Field F] [Fintype F] [DecidableEq F]
  {Œπ : Type*} [Fintype Œπ]
  (C : LinearCode F Œπ) : ErrCorrCode F Œπ :=
    ‚ü®C.words‚ü©

end LinearCode
